{"version":3,"sources":["assets/img/litteraeee-letras.png","assets/img/litteraeee-letras.gif","Routes.js","components/Sidebar/Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","React","lazy","AboutWord","NotFound","Routes","fallback","exact","path","component","routerProps","Sidebar","props","lang","useState","logo","img","setImg","className","src","alt","onMouseOver","logoGif","onMouseOut","App","Boolean","window","location","hostname","match","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kKAAAA,EAAOC,QAAU,IAA0B,+C,mBCA3CD,EAAOC,QAAU,IAA0B,+C,gLCGrCC,EAAOC,IAAMC,MAAK,kBAAM,gCACxBC,EAAYF,IAAMC,MAAK,kBAAM,gCAC7BE,EAAWH,IAAMC,MAAK,kBAAM,gCAYnBG,EAVA,kBACX,kBAAC,WAAD,CAAUC,SAAS,cACf,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW,SAAAC,GAAW,OAAI,kBAACV,EAASU,MAC1D,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,oBAAoBC,UAAW,SAAAC,GAAW,OAAI,kBAACP,EAAcO,MAC/E,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,IAAIC,UAAW,SAAAC,GAAW,OAAI,kBAACN,EAAaM,S,0CCoB3DC,EA5BC,SAACC,GAAW,IACjBC,EAAQD,EAARC,KADgB,EAEDC,mBAASC,KAFR,mBAEhBC,EAFgB,KAEXC,EAFW,KAYvB,OACI,oCACI,yBAAKC,UAAU,WACX,yBAAKA,UAAU,aACX,yBAAKC,IAAKH,EAAKE,UAAU,UAAUE,IAAI,aAAaC,YAZ5C,WACpBJ,EAAOK,MAWuFC,WAR5E,WAClBN,EAAOF,QAQK,wBAAIG,UAAU,cAAd,eACA,yBAAKA,UAAU,eACX,wBAAIA,UAAU,qBAAd,8BACA,uBAAGA,UAAU,eAAeL,Q,MCNrCW,MAbf,WAGE,OACE,oCACE,kBAAC,EAAD,CAASX,KAJA,cAKT,0BAAMK,UAAU,QACd,kBAAC,EAAD,SCAYO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACL,kBAAC,WAAD,CAAUzB,SAAU,MAChB,kBAAC,IAAD,CAAe0B,SAAS,oBACpB,kBAAC,EAAD,QAGVC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.249e1a36.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/litteraeee-letras.1bd6ade9.png\";","module.exports = __webpack_public_path__ + \"static/media/litteraeee-letras.1e5dbf58.gif\";","import React, { Suspense } from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\n\r\nconst Home = React.lazy(() => import('./pages/Home/Home'));\r\nconst AboutWord = React.lazy(() => import('./pages/AboutWord/AboutWord'));\r\nconst NotFound = React.lazy(() => import('./pages/NotFound/NotFound'));\r\n\r\nconst Routes = () => (\r\n    <Suspense fallback=\"Loading...\">\r\n        <Switch>\r\n            <Route exact path='/' component={routerProps => <Home {...routerProps} />} />\r\n            <Route exact path='/about-word/:word' component={routerProps => <AboutWord {...routerProps} />} />\r\n            <Route exact path='*' component={routerProps => <NotFound {...routerProps} />} />\r\n        </Switch>\r\n    </Suspense>\r\n)\r\n\r\nexport default Routes;","import React, { useState } from 'react';\r\nimport logo from '../../assets/img/litteraeee-letras.png';\r\nimport logoGif from '../../assets/img/litteraeee-letras.gif';\r\n\r\nconst Sidebar = (props) => {\r\n    const {lang} = props;\r\n    const [img, setImg] = useState(logo);\r\n\r\n    const hoverChangeLogo = () => {\r\n        setImg(logoGif);\r\n    }\r\n\r\n    const outChangeLogo = () => {\r\n        setImg(logo);\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <div className=\"sidebar\">\r\n                <div className=\"container\">\r\n                    <img src={img} className=\"img-top\" alt=\"Litteraeee\" onMouseOver={hoverChangeLogo} onMouseOut={outChangeLogo} />\r\n                    <h1 className=\"title-logo\">Litteraeee!</h1>\r\n                    <div className=\"description\">\r\n                        <h3 className=\"description-title\">Pratique o vocabulário:</h3>\r\n                        <p className=\"lang-choose\">{lang}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Sidebar;","import React from 'react';\nimport Routes from './Routes';\nimport Sidebar from './components/Sidebar/Sidebar.js';\nimport './App.css';\n\nfunction App() {\n  const lang = 'Inglês';\n\n  return (\n    <>\n      <Sidebar lang={lang} />\n      <main className=\"main\">\n        <Routes />\n      </main> \n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Suspense fallback={null}>\n        <BrowserRouter basename=\"/literaeee-react\">\n            <App/>\n        </BrowserRouter>\n    </Suspense>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}